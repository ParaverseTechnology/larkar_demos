plugins {
    id 'com.android.library'
}

apply from:"${project.rootDir}/config.gradle"

def jni_libpath = "${buildDir}/jniLibs/"
// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    compileSdk COMPLITE_VERSION

    defaultConfig {
        minSdk MIN_SDK_VERSION
        targetSdk TARGET_SDK_VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -std=c++1y -DANDROID_NDK_BUILD=1"
                targets 'lib_larkar'

                if (BUILD_WITH_CLOUDXR_SUPPORT) {
                    arguments "-DANDROID_STL=c++_shared",
                            "-DARENGINE_LIBPATH=${jni_libpath}/jni",
                            "-DCLOUDXR_LIBPATH=${project.rootDir}/libs/CloudXR/jni",
                            "-DCLOUDXR_INCLUDE=${project.rootDir}/libs/CloudXR/include",
                            "-DENABLE_CLOUDXR=1"
                } else {
                    arguments "-DANDROID_STL=c++_shared",
                            "-DARENGINE_LIBPATH=${jni_libpath}/jni"
                }
            }
            ndk {
                abiFilters 'arm64-v8a'
            }
            ndkBuild {
                abiFilters 'arm64-v8a'
            }
        }
    }

    buildTypes {
        String ENABLE_CLOUDXR = BUILD_WITH_CLOUDXR_SUPPORT ? "true" : "false";
        debug {
            buildConfigField "boolean","ENABLE_CLOUDXR",ENABLE_CLOUDXR
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean","ENABLE_CLOUDXR",ENABLE_CLOUDXR
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

repositories {
    flatDir {
        dirs "${project.rootDir}/libs"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // hw arsdk
    implementation 'com.huawei.hms:arenginesdk:3.7.0.3'
    natives 'com.huawei.hms:arenginesdk:3.7.0.3'

    // ARCore library
    implementation 'com.google.ar:core:1.30.0'
    natives 'com.google.ar:core:1.30.0'

    // larkxr sdk
    implementation(name: 'larkxr-kit-3.2.2.0-build-1', ext: 'aar')
    natives(name: 'larkxr-kit-3.2.2.0-build-1', ext: 'aar')

    // WARNING
    // enable cloudxr support must put your CloudXR.aar under larkar_android/libs dir
    if (BUILD_WITH_CLOUDXR_SUPPORT) {
        implementation(name: 'CloudXR', ext: 'aar')
    }
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibrariesArEngine() {
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            if (f.name.contains("larkxr")) {
                copy {
                    from zipTree(f)
                    into jni_libpath
                    // "jni/**/liblark_xr.so"
                    include ("jni/include/**/*", "jni/**/liblark_xr.so", "jni/**/liblark_common.so")
                }
            } else {
                copy {
                    from zipTree(f)
                    into jni_libpath
                    include "jni/**/*"
                }
            }
        }
    }
}


tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibrariesArEngine)
    }
}

// WARNING
// enable cloudxr support must put your CloudXR.aar under larkar_android/libs dir
if (BUILD_WITH_CLOUDXR_SUPPORT) {
    preBuild.dependsOn(':extractCloudXR');
}