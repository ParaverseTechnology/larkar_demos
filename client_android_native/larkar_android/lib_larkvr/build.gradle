plugins {
    id 'com.android.library'
}

apply from:"${project.rootDir}/config.gradle"

def jni_libpath = "${buildDir}/jniLibs/"
// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    compileSdk COMPLITE_VERSION

    defaultConfig {
        minSdk MIN_SDK_VERSION
        targetSdk TARGET_SDK_VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -std=c++1y -DANDROID_NDK_BUILD=1"
                targets 'lib_larkvr'

                if (BUILD_WITH_CLOUDXR_SUPPORT) {
                    arguments "-DANDROID_STL=c++_shared",
                            "-DLIBPATH=${jni_libpath}/jni",
                            "-DGLM_LIBPATH=${project.rootDir}/libs/",
                            "-DCLOUDXR_LIBPATH=${project.rootDir}/libs/CloudXR/jni",
                            "-DCLOUDXR_INCLUDE=${project.rootDir}/libs/CloudXR/include",
                            "-DOBOE_LIBPATH=${project.rootDir}/libs/Oboe/jni",
                            "-DOBOE_INCLUDE=${project.rootDir}/libs/Oboe/include",
                            "-DENABLE_CLOUDXR=1"
                } else {
                    arguments "-DANDROID_STL=c++_shared",
                            "-DGLM_LIBPATH=${project.rootDir}/libs/",
                            "-DLIBPATH=${jni_libpath}/jni",
                            "-DOBOE_LIBPATH=${project.rootDir}/libs/Oboe/jni",
                            "-DOBOE_INCLUDE=${project.rootDir}/libs/Oboe/include"
                }
            }
            ndk {
                abiFilters 'arm64-v8a'
            }
            ndkBuild {
                abiFilters 'arm64-v8a'
            }
        }
    }

    buildTypes {
        String ENABLE_CLOUDXR = BUILD_WITH_CLOUDXR_SUPPORT ? "true" : "false";
        debug {
            buildConfigField "boolean","ENABLE_CLOUDXR",ENABLE_CLOUDXR
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean","ENABLE_CLOUDXR",ENABLE_CLOUDXR
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    flatDir {
        dirs "${project.rootDir}/libs", "${project.rootDir}/lib_larkar/libs"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.3.1'
    // Android Mobile Vision
    // TODO(b/213613345) Migrate to ML Kit.
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    // TODO(b/219489509): Update to 1.5.0 once b/218868656 is fixed.
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'

    // larkxr sdk
    implementation(name: 'larkxr-kit-3.2.2.0-build-1', ext: 'aar')
    natives(name: 'larkxr-kit-3.2.2.0-build-1', ext: 'aar')

    // cardboard sdk
    implementation(name: 'cardboard-sdk-release-1.16', ext: 'aar')
    natives(name: 'cardboard-sdk-release-1.16', ext: 'aar')

    implementation(name: 'oboe-1.6.1', ext: 'aar')
}

task extractNativeLibraries() {
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            if (f.name.contains("larkxr")) {
                copy {
                    from zipTree(f)
                    into jni_libpath
                    // "jni/**/liblark_xr.so"
                    include ("jni/include/**/*", "jni/**/liblark_xr.so", "jni/**/liblark_common.so")
                }
            } else {
                copy {
                    from zipTree(f)
                    into jni_libpath
                    include "jni/**/*"
                }
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}

preBuild.dependsOn(':extractOboe')

// WARNING
// enable cloudxr support must put your CloudXR.aar under larkar_android/libs dir
if (BUILD_WITH_CLOUDXR_SUPPORT) {
    preBuild.dependsOn(':extractCloudXR');
}